//
// Grid Variables
// 

$row-width: em-calc(960) !default;
$column-gutter: em-calc(30) !default;
$total-columns: 12 !default;

//
// Grid Function
//

@function gridCalc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

@mixin box() {
		    width: 100%;
        display: block;
        margin-left: auto;
        margin-right: auto;
        margin-top: 0;
        margin-bottom: 0;
        max-width: 960px;
        *zoom: 1;          
        @include clearfix();
}
@mixin size( $width, $height) {
    width: $width;
    height: $height;
}

// We use this to add transitions to elements
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  -webkit-transition: $property $speed $ease;
     -moz-transition: $property $speed $ease;
      -ms-transition: $property $speed $ease;
       -o-transition: $property $speed $ease;
          transition: $property $speed $ease;
}

// We use this to do clear floats
@mixin clearfix() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

@mixin backface-vis($visibility: hidden ) {
	-webkit-backface-visibility:$visibility ;
       -moz-backface-visibility:$visibility ;
        -ms-backface-visibility:$visibility ;
            backface-visibility:$visibility ;
}

@mixin zero() {
  margin: 0;
  padding: 0;
}

// The default font-size is set to 100% of the browser style sheet (usually 16px)
// for compatibility with brower-based text zoom or user-set defaults.

// Since the typical default browser font-size is 16px, that makes the calculation for grid size.
// If you want your base font-size to be different and not have it effect the grid breakpoints,
// set $em-base to $base-font-size and make sure $base-font-size is a px value.
$base-font-size: 100% !default;

// $base-line-height is 24px while $base-font-size is 16px
$base-line-height: 150% !default;

// This is the default html and body font-size for the base em value.
$em-base: 16px !default;

// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-em($value, $base-value: $em-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1em;
  @if ($value == 0em) { $value: 0; } // Turn 0em into 0
  @return $value;
}

@function em-calc($values, $base-value: $em-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-em(nth($values, 1), $base-value); }

  $emValues: ();
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-em(nth($values, $i), $base-value));
  }
  @return $emValues;
}

// Support for the old syntax

@function emCalc($values){
  @return em-calc($values);
}